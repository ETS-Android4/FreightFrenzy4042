Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/teleop/Tele1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* Copyright (c) 2017 FIRST. All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted (subject to the limitations in the disclaimer below) provided that\r\n * the following conditions are met:\r\n *\r\n * Redistributions of source code must retain the above copyright notice, this list\r\n * of conditions and the following disclaimer.\r\n *\r\n * Redistributions in binary form must reproduce the above copyright notice, this\r\n * list of conditions and the following disclaimer in the documentation and/or\r\n * other materials provided with the distribution.\r\n *\r\n * Neither the name of FIRST nor the names of its contributors may be used to endorse or\r\n * promote products derived from this software without specific prior written permission.\r\n *\r\n * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS\r\n * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\r\n * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\r\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\r\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\npackage org.firstinspires.ftc.teamcode.teleop;\r\n\r\nimport com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\r\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\r\n\r\nimport org.firstinspires.ftc.teamcode.robot_components.input.Btn;\r\nimport org.firstinspires.ftc.teamcode.data.FieldPositions;\r\nimport org.firstinspires.ftc.teamcode.robot_components.input.Controller;\r\nimport org.firstinspires.ftc.teamcode.robot_components.cv.CVModule;\r\n\r\n@TeleOp(name=\"Tele1\", group=\"Linear Opmode\")\r\npublic class Tele1 extends LinearOpMode implements FieldPositions {\r\n    \r\n    // Declare OpMode members\r\n    CVModule robot;\r\n    Controller controller1;\r\n    Controller controller2;\r\n\r\n    @Override\r\n    public void runOpMode() {\r\n\r\n        // Code to run ONCE when the driver hits INIT\r\n        robot = new CVModule(hardwareMap, telemetry);\r\n        controller1 = new Controller(gamepad1); // Whoever presses start + a\r\n        controller2 = new Controller(gamepad2); // Whoever presses start + b\r\n\r\n        robot.initWithCV();\r\n\r\n        telemetry.addData(\"Status\", \"Initialized\");\r\n        telemetry.update();\r\n\r\n        // Wait for the game to start (driver presses PLAY)\r\n        waitForStart();\r\n        robot.cameras.webcam.pauseViewport();\r\n        robot.activateFieldLocalization();\r\n\r\n        robot.resetGyroAngle();\r\n        robot.resetElapsedTime();\r\n\r\n        while (opModeIsActive()) {\r\n\r\n            int[] odoData = robot.getOdometryDate();\r\n\r\n            telemetry.addData(\"odometry X:\", odoData[0]+\"\");\r\n            telemetry.addData(\"odometry Y:\", odoData[1]+\"\");\r\n            telemetry.update();\r\n            // Registers controller input\r\n            controller1.update();\r\n            controller2.update();\r\n\r\n            // -----------------------------------------------------------------------------------------\r\n            // -----------------------------------------------------------------------------------------\r\n            // ------------------------------   CONTROLLER 1 FUNCTIONS   -------------------------------\r\n            // -----------------------------------------------------------------------------------------\r\n            // -----------------------------------------------------------------------------------------\r\n            // NOTE: TO USE THESE FUNCTIONS PRESS START A\r\n            //DRIVER FUNCTIONS\r\n            if (controller1.right_bumper != Btn.PRESSED) {\r\n                robot.calculateDrivePowers(\r\n                        controller1.left_stick_x,\r\n                        controller1.left_stick_y,\r\n                        controller1.right_stick_x,\r\n                        controller1.right_stick_y\r\n                );\r\n            }\r\n\r\n            // this is my cool change\r\n\r\n            // -----------------------------------------------------------------------------------------\r\n            // -----------------------------------------------------------------------------------------\r\n            // ------------------------------   CONTROLLER 2 FUNCTIONS   -------------------------------\r\n            // -----------------------------------------------------------------------------------------\r\n            // -----------------------------------------------------------------------------------------\r\n            // NOTE: TO USE THESE FUNCTIONS, PRESS START B\r\n            //OPERATOR FUNCTIONS\r\n\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/teleop/Tele1.java b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/teleop/Tele1.java
--- a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/teleop/Tele1.java	(revision d0247c472431d7b89f9c0518f7737d32c90f384b)
+++ b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/teleop/Tele1.java	(date 1634084639025)
@@ -70,6 +70,9 @@
 
             int[] odoData = robot.getOdometryDate();
 
+            telemetry.addData("odometry X:", odoData[0]+"");
+            telemetry.addData("odometry Y:", odoData[1]+"");
+
             telemetry.addData("odometry X:", odoData[0]+"");
             telemetry.addData("odometry Y:", odoData[1]+"");
             telemetry.update();
@@ -84,16 +87,14 @@
             // -----------------------------------------------------------------------------------------
             // NOTE: TO USE THESE FUNCTIONS PRESS START A
             //DRIVER FUNCTIONS
-            if (controller1.right_bumper != Btn.PRESSED) {
-                robot.calculateDrivePowers(
-                        controller1.left_stick_x,
-                        controller1.left_stick_y,
-                        controller1.right_stick_x,
-                        controller1.right_stick_y
-                );
-            }
+            robot.calculateDrivePowers(
+                    controller1.left_stick_x,
+                    controller1.left_stick_y,
+                    controller1.right_stick_x,
+                    controller1.right_stick_y
+            );
 
-            // this is my cool change
+            robot.sendDrivePowers();
 
             // -----------------------------------------------------------------------------------------
             // -----------------------------------------------------------------------------------------
@@ -103,6 +104,7 @@
             // NOTE: TO USE THESE FUNCTIONS, PRESS START B
             //OPERATOR FUNCTIONS
 
+            telemetry.update();
         }
     }
 }
